<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Отправка сообщений</title>
    <style>
        #chat-container {
            width: 400px;
            padding: 20px;
            border: 1px solid #ccc;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        #messages {
            margin-bottom: 20px;
            max-height: 300px;
            overflow-y: auto;
        }

        .message {
            margin-bottom: 10px;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
        }

            .message .datetime {
                font-size: 0.8em;
                color: #666;
            }

        input[type="text"], button {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div id="chat-container">
        <div id="messages"></div>
        <input type="text" id="messageInput" placeholder="Введите сообщение">
        <button id="sendButton">Отправить</button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        let lastMessageNumber = 1;

        const messagesContainer = document.getElementById('messages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("@Model.ConnectionString/chat")
            .build();

        connection.start().then(function () {
            console.log("Connected to SignalR Hub.");
        }).catch(function (err) {
            return console.error(err.toString());
        });

        connection.on("ReceiveLastMessageNumber", (data) => {
            console.log('Raw data received:', data);
            try {
                if (typeof data === 'string') {
                    data = JSON.parse(data);
                }
                if (data === null || data.LastMessageNumber === undefined || data.LastMessageNumber === null) {
                    lastMessageNumber = 1;
                    console.log('Received null or invalid data, setting lastMessageNumber to 1');
                } else {
                    lastMessageNumber = data.LastMessageNumber+1;
                    console.log('Received last message number:', lastMessageNumber);
                }
            } catch (error) {
                console.error('Error parsing received data:', error);
                lastMessageNumber = 1;
            }
        });

        connection.on("Receive", (message) => {
            console.log('Raw data received:', message);
            try {
                const data = JSON.parse(message);
                lastMessageNumber = data.MessageNumber + 1;
            }
            catch (error) {
                console.error('Error:', error);
            }
        })

        sendButton.addEventListener('click', () => {
            const message = messageInput.value.trim();
            if (message) {
                sendMessage(message);
            }
        });

        async function sendMessage(message) {
            const requestData = {
                message: message,
                messageNumber: lastMessageNumber
            };

            try {
                const response = await fetch('@Model.ConnectionString/api/Message/SendMessage/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                });

                if (response.ok) {
                    const responseData = await response.json();
                    console.log('API response:', responseData);
                } else {
                    console.error('API response error:', response.statusText);
                }
            } catch (error) {
                console.error('Error sending message:', error);
            }
        }
    </script>
</body>
</html>